#!/usr/bin/env python

import getopt
import json
import sys

from libukai.ukai_config import UKAIConfig
from libukai.ukai_core import UKAI_CONFIG_FILE_DEFAULT
from libukai.ukai_rpc import UKAIXMLRPCClient

class UKAICtl(object):
    def __init__(self, config_file):
        self._config = UKAIConfig(config_file)
        self._rpc_client = UKAIXMLRPCClient(self._config)

    @property
    def core_server(self):
        return self._config.get('core_server')

    @core_server.setter
    def core_server(self, core_server):
        self._config.set('core_server', core_server)

    @property
    def core_port(self):
        return self._config.get('core_port')

    @core_port.setter
    def core_port(self, core_port):
        self._config.set('core_port', core_port)

    def create_image(self, *params):
        def usage():
            print 'Usage: %s create_image [-s SIZE] [-b BLOCK_SIZE] [-l LOCATION] [-h HYPERVISOR] IMAGE_NAME' % sys.argv[0]

        if len(params) < 1:
            usage()
            return -1

        size = None
        block_size = None
        location = None
        hypervisor = None
        (optlist, args) = getopt.getopt(params, 's:b:l:h:')
        for opt_pair in optlist:
            if opt_pair[0] == '-s':
                size = int(opt_pair[1])
            if opt_pair[0] == '-b':
                block_size = int(opt_pair[1])
            if opt_pair[0] == '-l':
                location = opt_pair[1]
            if opt_pair[0] == '-h':
                hypervisor = opt_pair[1]
        if size is None:
            usage()
            return -1
        image_name = args[0]
        
        return self._rpc_client.call('ctl_create_image', image_name,
                                     size, block_size,
                                     location, hypervisor)
        

    def add_image(self, *params):
        if len(params) < 1:
            print 'Usage: %s add_image IMAGE_NAME' % sys.argv[0]
            return -1
        return self._rpc_client.call('ctl_add_image', *params)

    def remove_image(self, *params):
        if len(params) < 1:
            print 'Usage: %s remove_image IMAGE_NAME' % sys.argv[0]
            return -1
        return self._rpc_client.call('ctl_remove_image', *params)

    def get_metadata(self, *params):
        if len(params) < 1:
            print 'Usage: %s get_metadata IMAGE_NAME' % sys.argv[0]
            return -1
        ret, metadata = self._rpc_client.call('ctl_get_metadata', *params)
        print metadata
        return 0

    def add_location(self, *params):
        if len(params) < 2:
            print ('Usage: %s add_location IMAGE_NAME LOCATION'
                   % sys.argv[0])
            return -1
        return self._rpc_client.call('ctl_add_location', *params)

    def remove_location(self, *params):
        if len(params) < 2:
            print ('Usage: %s remove_location IMAGE_NAME LOCATION'
                   % sys.argv[0])
            return -1
        return self._rpc_client.call('ctl_remove_location', *params)

    def add_hypervisor(self, *params):
        if len(params) < 2:
            print ('Usage: %s add_hypervisor IMAGE_NAME HYPERVISOR'
                   % sys.argv[0])
            return -1
        return self._rpc_client.call('ctl_add_hypervisor', *params)

    def remove_hypervisor(self, *params):
        if len(params) < 2:
            print ('Usage: %s remove_hypervisor IMAGE_NAME HYPERVISOR'
                   % sys.argv[0])
            return -1
        return self._rpc_client.call('ctl_remove_hypervisor', *params)

    def synchronize(self, *params):
        if len(params) < 1:
            print 'Usage: %s synchronize [-s START_BLOCK] [-e END_BLOCK] [-v] IMAGE_NAME' % sys.argv[0]
            return -1

        start = 0
        end = -1
        verbose = False
        (optlist, args) = getopt.getopt(params, 's:e:v')
        for opt_pair in optlist:
            if opt_pair[0] == '-s':
                start = int(opt_pair[1])
            if opt_pair[0] == '-e':
                end = int(opt_pair[1])
            if opt_pair[0] == '-v':
                verbose = True
        image_name = args[0]
        ret, json_metadata = self._rpc_client.call('ctl_get_metadata',
                                                   image_name)
        if json_metadata is None:
            return -1
        metadata = json.loads(json_metadata)
        nblocks = metadata['size'] / metadata['block_size']

        if (start < 0) or (end > nblocks - 1):
            print 'Block index out of range (must be 0 to %d)' % (nblocks - 1)
            return -1
        if (end != -1) and (end < start):
            print 'END_BLOCK must be greater or equal to START_BLOCK'
            return -1

        return self._rpc_client.call('ctl_synchronize', image_name,
                                     start, end, verbose)


def usage():
    print '''Usage: %s SUBCOMMAND PARAMS
  SUBCOMMANDS: add_image, remove_image, get_metadata
    add_location, remove_location, add_hypervisor, remove_hypervisor,
    synchronize''' % sys.argv[0]

def main():
    server = '127.0.0.1'
    port = 22221

    if len(sys.argv) < 2:
        usage()
        sys.exit(-1)
    
    ctl = UKAICtl(UKAI_CONFIG_FILE_DEFAULT)

    (optlist, args) = getopt.getopt(sys.argv[1:], 'h:p:')
    for opt_pair in optlist:
        if opt_pair[0] == '-h':
            ctl.core_server = opt_pair[1]
        if opt_pair[0] == '-p':
            ctl.core_port = opt_pair[1]

    if not hasattr(ctl, args[0]):
        usage()
        sys.exit(-1)

    return getattr(ctl, args[0])(*args[1:])

if __name__ == '__main__':
    main()
